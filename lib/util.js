const fs=require("fs"),path=require("path"),yaml=require("js-yaml"),hjson=require("hjson"),mkdirp=a=>{a=a||"";let b=path.resolve(a).split(path.sep);for(let c,d=1;d<b.length;d++)c=path.join(b.slice(0,d+1).join(path.sep)+path.sep),fs.existsSync(c)||fs.mkdirSync(c)};let getProp=(a,b)=>a[Object.keys(a).find(a=>a.toLowerCase()===b.toLowerCase())],getValue=(a,b)=>{let c=(b||"").toString().split(".");return c.filter(a=>a.trim()).reduce((a,b)=>a&&getProp(a,b),a)},setValue=(a,b,c)=>{let d=(a||"").split(".").filter(a=>a.trim());if(0===d.length)return b;let e={...c},f=e;for(;1<d.length;){let a=d.shift();f[a]="object"==typeof f[a]?{...f[a]}:{},f=f[a]}return f[d.shift()]=b,e};const merge=(...a)=>{const b=(a,c)=>{for(let d in a)c[d]=a[d]&&a[d].constructor===Object?b(a[d],c[d]||{}):a[d];return c};return Array.from(a).reduce((a,c)=>b(c,a),{})},shake=a=>{const b=a=>{for(let c in a)a[c]&&a[c].constructor===Object?(a[c]=b(a[c]),0===Object.keys(a[c]).length&&delete a[c]):null==a[c]&&delete a[c];return a};return b(a)},loadFile=a=>{let b=fs.readFileSync(a,"utf-8");if("{"===b.trim()[0])try{return{values:hjson.parse(b),format:"json"}}catch(a){}return{values:yaml.safeLoad(b,{json:!0})||{},format:"yaml"}},saveFile=(a,b,c)=>{b=b||{},mkdirp(path.dirname(a)),b=shake(b);let d;return d=0===Object.keys(b).length?"":"json"===c?hjson.stringify(b,{condense:!0,emitRootBraces:!1,separator:!0,bracesSameLine:!0,multiline:"off"}):yaml.safeDump(b,{sortKeys:!0,lineWidth:1024,noCompatMode:!0}),fs.writeFileSync(a,d),!0};module.exports={mkdirp,getValue,setValue,merge,loadFile,saveFile};