const path=require("path"),os=require("os"),dotenv=require("./dotenv"),debug=require("debug")("aio-cli-config"),{merge,loadFile,saveFile,getValue,setValue}=require("./util"),readFile=a=>{let b={};try{b=loadFile(a),debug(`reading config: ${a}`)}catch(a){"ENOENT"!==a.code&&(debug(a.toString()),debug("skipping ..."))}return b};class Config{constructor(){this.envs={};const a=process.env.XDG_CONFIG_HOME||path.join(os.homedir(),".config");this.global={file:process.env.AIO_CONFIG_FILE||path.join(a,"aio")},this.local={file:path.join(process.cwd(),".aio")}}reload(){dotenv(),this.global={...this.global,...readFile(this.global.file,this._debugFn)},this.local={...this.local,...readFile(this.local.file,this._debugFn)},this.envs={};let a=[];for(let b in process.env){let c=b.match(/^AIO_(.+)/i);if(c){let d=`${c[1].toLowerCase().split("_").join(".")}`;a.push(d),this.envs=setValue(d,process.env[b],this.envs)}}return 0<a.length&&debug(`reading env variables: ${a.join(", ")}`),this.values=merge(this.global.values,this.local.values,this.envs),debug(JSON.stringify(this.values,null,2)),this}get(a="",b){this.values||this.reload();let c=this.values;"global"===b?c=this.global.values:"local"===b?c=this.local.values:"env"==b&&(c=this.envs),debug(`reading config: ${a||"<all>"}`);let d=getValue(c,a);return null==d?d:JSON.parse(JSON.stringify(d))}set(a,b,c=!1){let d=c?this.local:this.global,e=setValue(a,b,d.values);return debug(`writing config: ${a||"<all>"} at ${d.file}`),saveFile(d.file,e,d.format),this.reload()}}module.exports=Config;