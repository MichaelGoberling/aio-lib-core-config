const path=require("path"),os=require("os"),dotenv=require("./dotenv"),{merge,loadFile,saveFile,getValue,setValue}=require("./util"),readFile=(a,b)=>{let c={};try{c=loadFile(a),b(`reading config: ${a}`)}catch(a){"ENOENT"!==a.code&&(b(a.toString()),b("skipping ..."))}return c};class Config{constructor(a){this._debugFn=a&&a.debug||a||(()=>!0),this.envs={};const b=process.env.XDG_CONFIG_HOME||path.join(os.homedir(),".config");this.global={file:process.env.AIO_CONFIG_FILE||path.join(b,"aio")},this.local={file:path.join(process.cwd(),".aio")},this.reload()}reload(){dotenv(this._debugFn),this.global={...this.global,...readFile(this.global.file,this._debugFn)},this.local={...this.local,...readFile(this.local.file,this._debugFn)},this.envs={};let a=[];for(let b in process.env){let c=b.match(/^AIO_(.+)/i);if(c){let d=`${c[1].toLowerCase().split("_").join(".")}`;a.push(d),this.envs=setValue(d,process.env[b],this.envs)}}return 0<a.length&&this._debugFn(`reading env variables: ${a.join(", ")}`),this.values=merge(this.global.values,this.local.values,this.envs),this._debugFn("AIO CLI CONFIGURATION -----------------------------------------"),this._debugFn(JSON.stringify(this.values,null,2)),this._debugFn("---------------------------------------------------------------"),this}get(a="",b){let c=this.values;"global"===b?c=this.global.values:"local"===b?c=this.local.values:"env"==b&&(c=this.envs);let d=getValue(c,a);return null==d?d:JSON.parse(JSON.stringify(d))}set(a,b,c=!1){let d=c?this.local:this.global,e=setValue(a,b,d.values);return this._debugFn(`writing config: ${d.file}`),saveFile(d.file,e,d.format),this.reload()}}module.exports=Config;